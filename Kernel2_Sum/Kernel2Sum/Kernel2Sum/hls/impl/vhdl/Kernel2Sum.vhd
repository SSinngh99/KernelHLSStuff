-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Kernel2Sum is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    OutStream_TREADY : IN STD_LOGIC;
    InputStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    InputStream_TVALID : IN STD_LOGIC;
    InputStream_TREADY : OUT STD_LOGIC;
    OutStream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OutStream_TVALID : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Kernel2Sum is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Kernel2Sum_Kernel2Sum,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.795000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=74,HLS_SYN_LUT=146,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal regslice_both_OutStream_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal tmp_nbreadreq_fu_59_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal InputStream_TDATA_blk_n : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal OutStream_TDATA_blk_n : STD_LOGIC;
    signal outVal_fu_75_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal inVal1_fu_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_inVal1_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal regslice_both_InputStream_U_apdone_blk : STD_LOGIC;
    signal InputStream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal InputStream_TVALID_int_regslice : STD_LOGIC;
    signal InputStream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_InputStream_U_ack_in : STD_LOGIC;
    signal OutStream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal OutStream_TVALID_int_regslice : STD_LOGIC;
    signal OutStream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_OutStream_U_vld_out : STD_LOGIC;
    signal ap_condition_175 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component Kernel2Sum_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component Kernel2Sum_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component Kernel2Sum_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component Kernel2Sum_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    flow_control_loop_pipe_U : component Kernel2Sum_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);

    regslice_both_InputStream_U : component Kernel2Sum_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => InputStream_TDATA,
        vld_in => InputStream_TVALID,
        ack_in => regslice_both_InputStream_U_ack_in,
        data_out => InputStream_TDATA_int_regslice,
        vld_out => InputStream_TVALID_int_regslice,
        ack_out => InputStream_TREADY_int_regslice,
        apdone_blk => regslice_both_InputStream_U_apdone_blk);

    regslice_both_OutStream_U : component Kernel2Sum_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => OutStream_TDATA_int_regslice,
        vld_in => OutStream_TVALID_int_regslice,
        ack_in => OutStream_TREADY_int_regslice,
        data_out => OutStream_TDATA,
        vld_out => regslice_both_OutStream_U_vld_out,
        ack_out => OutStream_TREADY,
        apdone_blk => regslice_both_OutStream_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = OutStream_TREADY_int_regslice) or (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    inVal1_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_175)) then
                inVal1_fu_42 <= outVal_fu_75_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_pp0_stage1_iter0, ap_block_state1_pp0_stage0_iter0, OutStream_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = OutStream_TREADY_int_regslice) or (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_logic_0 = OutStream_TREADY_int_regslice) or (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    InputStream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, ap_done_reg, ap_start_int, InputStream_TVALID_int_regslice)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            InputStream_TDATA_blk_n <= InputStream_TVALID_int_regslice;
        else 
            InputStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    InputStream_TREADY <= regslice_both_InputStream_U_ack_in;

    InputStream_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, OutStream_TREADY_int_regslice)
    begin
        if ((not(((ap_const_logic_0 = OutStream_TREADY_int_regslice) or (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            InputStream_TREADY_int_regslice <= ap_const_logic_1;
        else 
            InputStream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    OutStream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_done_reg, ap_start_int, OutStream_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            OutStream_TDATA_blk_n <= OutStream_TREADY_int_regslice;
        else 
            OutStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OutStream_TDATA_int_regslice <= std_logic_vector(unsigned(InputStream_TDATA_int_regslice) + unsigned(ap_sig_allocacmp_inVal1_1));
    OutStream_TVALID <= regslice_both_OutStream_U_vld_out;

    OutStream_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, OutStream_TREADY_int_regslice)
    begin
        if ((not(((ap_const_logic_0 = OutStream_TREADY_int_regslice) or (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            OutStream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            OutStream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0, OutStream_TREADY_int_regslice)
    begin
        if (((ap_const_logic_0 = OutStream_TREADY_int_regslice) or (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_pp0_stage1_iter0, OutStream_TREADY_int_regslice)
    begin
        if (((ap_const_logic_0 = OutStream_TREADY_int_regslice) or (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg, ap_start_int, InputStream_TVALID_int_regslice, OutStream_TREADY_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = OutStream_TREADY_int_regslice) or (ap_const_logic_0 = InputStream_TVALID_int_regslice) or (ap_start_int = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(regslice_both_OutStream_U_apdone_blk, OutStream_TREADY_int_regslice)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((regslice_both_OutStream_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = OutStream_TREADY_int_regslice));
    end process;


    ap_condition_175_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, OutStream_TREADY_int_regslice)
    begin
                ap_condition_175 <= (not(((ap_const_logic_0 = OutStream_TREADY_int_regslice) or (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0))) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_pp0_stage1_iter0, tmp_nbreadreq_fu_59_p3, OutStream_TREADY_int_regslice)
    begin
        if ((not(((ap_const_logic_0 = OutStream_TREADY_int_regslice) or (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0))) and (tmp_nbreadreq_fu_59_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_pp0_stage1_iter0, ap_loop_exit_ready, ap_done_reg, OutStream_TREADY_int_regslice)
    begin
        if ((not(((ap_const_logic_0 = OutStream_TREADY_int_regslice) or (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_pp0_stage1_iter0, OutStream_TREADY_int_regslice)
    begin
        if ((not(((ap_const_logic_0 = OutStream_TREADY_int_regslice) or (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_inVal1_1_assign_proc : process(ap_CS_fsm_state1, inVal1_fu_42, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_inVal1_1 <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_inVal1_1 <= inVal1_fu_42;
        end if; 
    end process;

    outVal_fu_75_p2 <= std_logic_vector(unsigned(InputStream_TDATA_int_regslice) + unsigned(ap_sig_allocacmp_inVal1_1));
    tmp_nbreadreq_fu_59_p3 <= (0=>(InputStream_TVALID_int_regslice), others=>'-');
end behav;
